{
  "version": 3,
  "sources": ["../src/globals/supported-filters.global.ts", "../src/utils/filter.utils.ts", "../src/filters/blur.filter.ts", "../src/filters/brightness.filter.ts", "../src/filters/contrast.filter.ts", "../src/filters/drop-shadow.filter.ts", "../src/filters/grayscale.filter.ts", "../src/filters/hue-rotate.filter.ts", "../src/filters/invert.filter.ts", "../src/filters/none.filter.ts", "../src/filters/opacity.filter.ts", "../src/filters/saturate.filter.ts", "../src/filters/sepia.filter.ts", "../src/utils/context.utils.ts", "../src/utils/history.utils.ts", "../src/utils/proxy.utils.ts", "../src/polyfill.ts", "../src/utils/detection.utils.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Filter } from '../types/filter.type.js';\n\n// stores all implemented filters, see\n// available filters for reference\nexport const SUPPORTED_FILTERS = new Map<string, Filter>();\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Context2D } from './proxy.utils.js';\n\n// applies the given filter to the provided canvas 2d context\nexport const applyFilter = (\n  context: Context2D,\n  canvasFilters: CanvasFilters['filter'] = 'none',\n) => {\n  // parse applied filters and call implementations\n  canvasFilters\n    // filters are separated by whitespace\n    .match(/([-a-z]+)(?:\\(([\\w\\d\\s.%-]*)\\))?/gim)\n    // filters may have options within appended brackets\n    ?.map(\n      filter =>\n        filter.match(/([-a-z]+)(?:\\((.*)\\))?/i)?.slice(1, 3) as [\n          string,\n          string,\n        ],\n    )\n    // apply all filters\n    .reduce((input, [filter, options]) => {\n      // do we have a appropriate filter implementation?\n      if (SUPPORTED_FILTERS.has(filter)) {\n        // then filter and return the result\n        return SUPPORTED_FILTERS.get(filter)!(\n          input,\n          ...(options || '').split(' '),\n        );\n      }\n      // nope, skip this\n      return input;\n    }, context);\n};\n\n// filter options are often represented as number-percentage,\n// means that they'll be percentages like `50%` or floating\n// in-between 0 and 1 like `.5`, so we normalize them.\n// https://developer.mozilla.org/en-US/docs/Web/CSS/filter#number-percentage\nexport const normalizeNumberPercentage = (percentage: string): number => {\n  let normalized = parseFloat(percentage);\n\n  // check for percentages and divide by a hundred\n  if (/%\\s*?$/i.test(percentage)) {\n    normalized /= 100;\n  }\n\n  return normalized;\n};\n\n// normalizes angles to a float between 0 and 1.\n// https://developer.mozilla.org/en-US/docs/Web/CSS/angle#Units\nexport const normalizeAngle = (angle: string): number => {\n  let normalized = parseFloat(angle);\n  const unit = angle.slice(normalized.toString().length);\n\n  // check for units and align accordingly\n  switch (unit) {\n    case 'deg':\n      normalized /= 360;\n      break;\n    case 'grad':\n      normalized /= 400;\n      break;\n    case 'rad':\n      normalized /= 2 * Math.PI;\n      break;\n  }\n\n  return normalized;\n};\n\n// TODO: we're assuming pixel based values for now only, so adopt to other lengths as well\n// https://developer.mozilla.org/en-US/docs/Web/CSS/length\nexport const normalizeLength = (length: string): number => {\n  return parseFloat(length);\n};\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeLength } from '../utils/filter.utils.js';\n\nexport const blur: Filter = (context, radius = '0') => {\n  const amount = normalizeLength(radius);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n\n  // http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n  const wm = width - 1;\n  const hm = height - 1;\n  const rad1 = amount + 1;\n\n  const mulTable = [\n    1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137, 241,\n    107, 3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141, 133, 249,\n    117, 221, 209, 197, 187, 177, 169, 5, 153, 73, 139, 133, 127, 243, 233, 223,\n    107, 103, 99, 191, 23, 177, 171, 165, 159, 77, 149, 9, 139, 135, 131, 253,\n    245, 119, 231, 224, 109, 211, 103, 25, 195, 189, 23, 45, 175, 171, 83, 81,\n    79, 155, 151, 147, 9, 141, 137, 67, 131, 129, 251, 123, 30, 235, 115, 113,\n    221, 217, 53, 13, 51, 50, 49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163,\n    5, 79, 155, 19, 75, 147, 145, 143, 35, 69, 17, 67, 33, 65, 255, 251, 247,\n    243, 239, 59, 29, 229, 113, 111, 219, 27, 213, 105, 207, 51, 201, 199, 49,\n    193, 191, 47, 93, 183, 181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159,\n    157, 155, 77, 19, 75, 37, 73, 145, 143, 141, 35, 138, 137, 135, 67, 33, 131,\n    129, 255, 63, 250, 247, 61, 121, 239, 237, 117, 29, 229, 227, 225, 111, 55,\n    109, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 48, 190,\n    47, 93, 185, 183, 181, 179, 178, 176, 175, 173, 171, 85, 21, 167, 165, 41,\n    163, 161, 5, 79, 157, 78, 154, 153, 19, 75, 149, 74, 147, 73, 144, 143, 71,\n    141, 140, 139, 137, 17, 135, 134, 133, 66, 131, 65, 129, 1,\n  ];\n  const mulSum = mulTable[amount];\n\n  const shgTable = [\n    0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17, 12,\n    18, 16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20, 20, 20, 20,\n    20, 20, 15, 20, 19, 20, 20, 20, 21, 21, 21, 20, 20, 20, 21, 18, 21, 21, 21,\n    21, 20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22, 21, 22, 21, 19, 22, 22, 19,\n    20, 22, 22, 21, 21, 21, 22, 22, 22, 18, 22, 22, 21, 22, 22, 23, 22, 20, 23,\n    22, 22, 23, 23, 21, 19, 21, 21, 21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23,\n    18, 22, 23, 20, 22, 23, 23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24,\n    22, 21, 24, 23, 23, 24, 21, 24, 23, 24, 22, 24, 24, 22, 24, 24, 22, 23, 24,\n    24, 24, 20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23, 22, 23, 24,\n    24, 24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25, 25, 24,\n    22, 25, 25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n    23, 25, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 22, 25, 25, 23, 25,\n    25, 20, 24, 25, 24, 25, 25, 22, 24, 25, 24, 25, 24, 25, 25, 24, 25, 25, 25,\n    25, 22, 25, 25, 25, 24, 25, 24, 25, 18,\n  ];\n  const shgSum = shgTable[amount];\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n\n  const vmin = [];\n  const vmax = [];\n\n  let iterations = 3; // 1 - 3\n  let p, p1, p2, pa;\n\n  while (iterations-- > 0) {\n    let yw = 0;\n    let yi = 0;\n\n    for (let y = 0; y < height; y++) {\n      let rsum = data[yw] * rad1;\n      let gsum = data[yw + 1] * rad1;\n      let bsum = data[yw + 2] * rad1;\n      let asum = data[yw + 3] * rad1;\n\n      for (let i = 1; i <= amount; i++) {\n        // tslint:disable-next-line no-bitwise\n        p = yw + ((i > wm ? wm : i) << 2);\n        rsum += data[p++];\n        gsum += data[p++];\n        bsum += data[p++];\n        asum += data[p];\n      }\n\n      for (let x = 0; x < width; x++) {\n        r[yi] = rsum;\n        g[yi] = gsum;\n        b[yi] = bsum;\n        a[yi] = asum;\n\n        if (y === 0) {\n          // tslint:disable-next-line no-bitwise\n          vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n          // tslint:disable-next-line no-bitwise\n          vmax[x] = (p = x - amount) > 0 ? p << 2 : 0;\n        }\n\n        p1 = yw + vmin[x];\n        p2 = yw + vmax[x];\n\n        rsum += data[p1++] - data[p2++];\n        gsum += data[p1++] - data[p2++];\n        bsum += data[p1++] - data[p2++];\n        asum += data[p1] - data[p2];\n\n        yi++;\n      }\n      // tslint:disable-next-line no-bitwise\n      yw += width << 2;\n    }\n\n    for (let x = 0; x < width; x++) {\n      let yp = x;\n      let rsum = r[yp] * rad1;\n      let gsum = g[yp] * rad1;\n      let bsum = b[yp] * rad1;\n      let asum = a[yp] * rad1;\n\n      for (let i = 1; i <= amount; i++) {\n        yp += i > hm ? 0 : width;\n        rsum += r[yp];\n        gsum += g[yp];\n        bsum += b[yp];\n        asum += a[yp];\n      }\n\n      // tslint:disable-next-line no-bitwise\n      yi = x << 2;\n\n      for (let y = 0; y < height; y++) {\n        // tslint:disable-next-line no-bitwise\n        data[yi + 3] = pa = (asum * mulSum) >>> shgSum;\n\n        if (pa > 0) {\n          pa = 255 / pa;\n          // tslint:disable-next-line no-bitwise\n          data[yi] = ((rsum * mulSum) >>> shgSum) * pa;\n          // tslint:disable-next-line no-bitwise\n          data[yi + 1] = ((gsum * mulSum) >>> shgSum) * pa;\n          // tslint:disable-next-line no-bitwise\n          data[yi + 2] = ((bsum * mulSum) >>> shgSum) * pa;\n        } else {\n          data[yi] = data[yi + 1] = data[yi + 2] = 0;\n        }\n\n        if (x === 0) {\n          vmin[y] = ((p = y + rad1) < hm ? p : hm) * width;\n          vmax[y] = (p = y - amount) > 0 ? p * width : 0;\n        }\n\n        p1 = x + vmin[y];\n        p2 = x + vmax[y];\n\n        rsum += r[p1] - r[p2];\n        gsum += g[p1] - g[p2];\n        bsum += b[p1] - b[p2];\n        asum += a[p1] - a[p2];\n\n        // tslint:disable-next-line no-bitwise\n        yi += width << 2;\n      }\n    }\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('blur', blur);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const brightness: Filter = (context, amount = '1') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount === 1) {\n    return context;\n  }\n\n  // align minimum\n  if (amount < 0) {\n    amount = 0;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  for (let i = 0; i < length; i += 4) {\n    data[i + 0] *= amount;\n    data[i + 1] *= amount;\n    data[i + 2] *= amount;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('brightness', brightness);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const contrast: Filter = (context, amount = '1') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount === 1) {\n    return context;\n  }\n\n  // align minimum\n  if (amount < 0) {\n    amount = 0;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  // https://gist.github.com/jonathantneal/2053866\n  for (let i = 0; i < length; i += 4) {\n    data[i + 0] = ((data[i + 0] / 255 - 0.5) * amount + 0.5) * 255;\n    data[i + 1] = ((data[i + 1] / 255 - 0.5) * amount + 0.5) * 255;\n    data[i + 2] = ((data[i + 2] / 255 - 0.5) * amount + 0.5) * 255;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('contrast', contrast);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeLength } from '../utils/filter.utils.js';\n\nexport const dropShadow: Filter = (\n  context,\n  offsetX: string,\n  offsetY: string,\n  blurOrColor?: string,\n  color?: string,\n) => {\n  // prepare a new temp canvas\n  const shadowContext = document.createElement('canvas').getContext('2d')!;\n  const { width, height } = context.canvas;\n\n  // set the same size of the original canvas\n  // https://github.com/davidenke/context-filter-polyfill/issues/9\n  shadowContext.canvas.width = width;\n  shadowContext.canvas.height = height;\n\n  // normalize the params and apply to the temp context\n  // be aware of different blur behavior in different browsers\n  // s. https://github.com/fabricjs/fabric.js/issues/4402\n  shadowContext.shadowOffsetX = normalizeLength(offsetX);\n  shadowContext.shadowOffsetY = normalizeLength(offsetY);\n  shadowContext.shadowBlur = color ? normalizeLength(blurOrColor || '0') : 0;\n  shadowContext.shadowColor = color || blurOrColor || 'transparent';\n\n  // draw over the contents applying the shadow\n  shadowContext.drawImage(context.canvas, 0, 0);\n\n  // set back shadowed contents\n  context.putImageData(shadowContext.getImageData(0, 0, width, height), 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('drop-shadow', dropShadow);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const grayscale: Filter = (context, amount = '0') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  for (let i = 0; i < length; i += 4) {\n    const luma = data[i] * 0.2126 + data[i + 1] * 0.7152 + data[i + 2] * 0.0722;\n    data[i + 0] += (luma - data[i + 0]) * amount;\n    data[i + 1] += (luma - data[i + 1]) * amount;\n    data[i + 2] += (luma - data[i + 2]) * amount;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('grayscale', grayscale);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeAngle } from '../utils/filter.utils.js';\n\nexport const hueRotate: Filter = (context, rotation = '0deg') => {\n  const amount = normalizeAngle(rotation);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  // https://github.com/makoConstruct/canvas-hue-rotate/blob/master/hueShiftCanvas.js\n  const h = ((amount % 1) + 1) % 1; // wraps the angle to unit interval, even when negative\n  const th = h * 3;\n  const thr = Math.floor(th);\n  const d = th - thr;\n  const b = 1 - d;\n  let ma, mb, mc;\n  let md, me, mf;\n  let mg, mh, mi;\n\n  switch (thr) {\n    default:\n      ma = mb = mc = md = me = mf = mg = mh = mi = 0;\n      break;\n    case 0:\n      ma = b;\n      mb = 0;\n      mc = d;\n      md = d;\n      me = b;\n      mf = 0;\n      mg = 0;\n      mh = d;\n      mi = b;\n      break;\n    case 1:\n      ma = 0;\n      mb = d;\n      mc = b;\n      md = b;\n      me = 0;\n      mf = d;\n      mg = d;\n      mh = b;\n      mi = 0;\n      break;\n    case 2:\n      ma = d;\n      mb = b;\n      mc = 0;\n      md = 0;\n      me = d;\n      mf = b;\n      mg = b;\n      mh = 0;\n      mi = d;\n      break;\n  }\n  // do the pixels\n  let place = 0;\n  for (let y = 0; y < height; ++y) {\n    for (let x = 0; x < width; ++x) {\n      place = 4 * (y * width + x);\n\n      const ir = data[place + 0];\n      const ig = data[place + 1];\n      const ib = data[place + 2];\n\n      data[place + 0] = Math.floor(ma * ir + mb * ig + mc * ib);\n      data[place + 1] = Math.floor(md * ir + me * ig + mf * ib);\n      data[place + 2] = Math.floor(mg * ir + mh * ig + mi * ib);\n    }\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('hue-rotate', hueRotate);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const invert: Filter = (context, amount = '0') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  for (let i = 0; i < length; i += 4) {\n    data[i + 0] = Math.abs(data[i + 0] - 255 * amount);\n    data[i + 1] = Math.abs(data[i + 1] - 255 * amount);\n    data[i + 2] = Math.abs(data[i + 2] - 255 * amount);\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('invert', invert);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\n\nexport const none: Filter = context => context;\n\nSUPPORTED_FILTERS.set('none', none);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const opacity: Filter = (context, amount = '1') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount < 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, the 4th entry is the alpha channel\n  for (let i = 3; i < length; i += 4) {\n    data[i] *= amount;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('opacity', opacity);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const saturate: Filter = (context, saturation = '1') => {\n  let amount = normalizeNumberPercentage(saturation);\n\n  // do not manipulate without proper amount\n  if (amount === 1) {\n    return context;\n  }\n\n  // align minimum\n  if (amount < 0) {\n    amount = 0;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const lumR = (1 - amount) * 0.3086;\n  const lumG = (1 - amount) * 0.6094;\n  const lumB = (1 - amount) * 0.082;\n  // tslint:disable-next-line no-bitwise\n  const shiftW = width << 2;\n\n  for (let j = 0; j < height; j++) {\n    const offset = j * shiftW;\n    for (let i = 0; i < width; i++) {\n      // tslint:disable-next-line no-bitwise\n      const pos = offset + (i << 2);\n      const r = data[pos + 0];\n      const g = data[pos + 1];\n      const b = data[pos + 2];\n\n      data[pos + 0] = (lumR + amount) * r + lumG * g + lumB * b;\n      data[pos + 1] = lumR * r + (lumG + amount) * g + lumB * b;\n      data[pos + 2] = lumR * r + lumG * g + (lumB + amount) * b;\n    }\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('saturate', saturate);\n", "import { SUPPORTED_FILTERS } from '../globals/supported-filters.global.js';\nimport type { Filter } from '../types/filter.type.js';\nimport { normalizeNumberPercentage } from '../utils/filter.utils.js';\n\nexport const sepia: Filter = (context, amount = '0') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  // https://github.com/licson0729/CanvasEffects/blob/master/CanvasEffects.js#L464-L466\n  for (let i = 0; i < length; i += 4) {\n    const r = data[i + 0];\n    const g = data[i + 1];\n    const b = data[i + 2];\n    data[i + 0] =\n      (0.393 * r + 0.769 * g + 0.189 * b) * amount + r * (1 - amount);\n    data[i + 1] =\n      (0.349 * r + 0.686 * g + 0.168 * b) * amount + g * (1 - amount);\n    data[i + 2] =\n      (0.272 * r + 0.534 * g + 0.131 * b) * amount + b * (1 - amount);\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n\nSUPPORTED_FILTERS.set('sepia', sepia);\n", "import type { Context2DHistory } from './history.utils.js';\nimport type { Context2D } from './proxy.utils.js';\n\ndeclare global {\n  // some utility types\n  type PickByType<T, Value> = {\n    [P in keyof T as T[P] extends Value | undefined ? P : never]: T[P];\n  };\n\n  // convenience type for making all properties writeable\n  type Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\n  // all callable functions in 2d contexts\n  type Context2DFn = PickByType<\n    Context2D,\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    Function\n  >;\n\n  // add some properties to the 2d contexts\n  interface CanvasRenderingContext2D {\n    __cloned: boolean;\n    __withoutSideEffects: Context2DFn;\n  }\n  interface OffscreenCanvasRenderingContext2D {\n    __cloned: boolean;\n    __withoutSideEffects: Context2DFn;\n  }\n\n  // add a history to the canvas objects\n  interface HTMLCanvasElement {\n    __history: Context2DHistory;\n  }\n  interface OffscreenCanvas {\n    __history: Context2DHistory;\n  }\n}\n\n// a list of all drawing functions in 2d contexts\nexport const DRAWING_FN_PROPS = [\n  'clearRect',\n  'clip',\n  'drawImage',\n  'putImageData',\n  'fill',\n  'fillRect',\n  'fillText',\n  'stroke',\n  'strokeRect',\n  'strokeText',\n  'reset',\n  'restore',\n] as const satisfies Partial<Array<keyof Context2D>>;\n\nexport function isDrawingFn(\n  property: string,\n): property is (typeof DRAWING_FN_PROPS)[number] {\n  return DRAWING_FN_PROPS.includes(\n    property as (typeof DRAWING_FN_PROPS)[number],\n  );\n}\n", "import type { Context2D } from './proxy.utils';\n\nexport type Context2DHistoryEntry = {\n  type: 'set' | 'apply' | 'draw';\n  prop: keyof Context2D;\n  value?: unknown;\n  args?: unknown[];\n};\n\nexport class Context2DHistory extends Set<Context2DHistoryEntry> {\n  applyTo(context: Context2D): void {\n    this.forEach(({ type, prop, value, args }) => {\n      switch (type) {\n        case 'set':\n          // @ts-expect-error - `canvas` property is readonly\n          context[prop] = value;\n          break;\n        case 'apply':\n          // @ts-expect-error - our types do not narrow the `type` tp specific properties\n          context[prop](...args);\n          break;\n      }\n    });\n  }\n\n  lastValueOf(prop: keyof Context2D): Context2DHistoryEntry | undefined {\n    return [...this].findLast(entry => entry.prop === prop);\n  }\n}\n", "import { isDrawingFn } from './context.utils.js';\nimport { Context2DHistory } from './history.utils.js';\n\nexport type Context2D =\n  | CanvasRenderingContext2D\n  | OffscreenCanvasRenderingContext2D;\n\nexport type Context2DCtor = new () => Context2D;\n\nexport type ProxyOptions = {\n  onDraw: (context: Context2D, drawFn: string, args?: unknown[]) => void;\n};\n\nexport function applyProxyTo(\n  objectCtor: typeof HTMLCanvasElement | typeof OffscreenCanvas,\n  contextCtor: Context2DCtor,\n  { onDraw }: Partial<ProxyOptions>,\n) {\n  // create a mirror of the 2d context\n  const mirror = {\n    __cloned: false,\n    __withoutSideEffects: {},\n  } as unknown as typeof contextCtor;\n\n  // copy all properties from the original context\n  const properties = Object.getOwnPropertyDescriptors(contextCtor.prototype);\n  Object.defineProperties(mirror, properties);\n  Object.keys(properties).forEach(prop => {\n    delete contextCtor.prototype[prop];\n  });\n\n  // prepare history on canvas\n  Object.defineProperty(objectCtor.prototype, '__history', {\n    get(): Context2DHistory {\n      if (!this.___history) {\n        this.___history = new Context2DHistory();\n      }\n      return this.___history;\n    },\n    set(value: Context2DHistory) {\n      this.___history = value;\n    },\n  });\n\n  Object.setPrototypeOf(\n    contextCtor.prototype,\n    new Proxy<Context2DCtor>(mirror, {\n      get(target, prop: keyof Context2D, receiver: Context2D) {\n        // trap access to the __withoutSideEffects property to provide a proxy\n        // which exposes all 2d unpatched functions without side effects\n        if (prop === '__withoutSideEffects') {\n          return new Proxy(\n            {},\n            {\n              get: (_, prop: string) => {\n                // @ts-expect-error - our types aren't perfect\n                return target[prop]?.bind(receiver);\n              },\n            },\n          );\n        }\n\n        // handle function calls: a.b(...args)\n        if (prop in properties && 'value' in properties[prop as string]) {\n          // provide a wrapper function to intercept arguments\n          return (...args: unknown[]) => {\n            // skip drawing functions, apply our own magic\n            if (isDrawingFn(prop)) {\n              onDraw?.(receiver, prop, args);\n              receiver.canvas.__history.add({ type: 'draw', prop, args });\n              return;\n            }\n\n            receiver.canvas.__history.add({ type: 'apply', prop, args });\n            // @ts-expect-error - it's a function, we checked!\n            return target[prop]?.apply(receiver, args);\n          };\n        }\n\n        // handle property access: a.b\n        return Reflect.get(target, prop, receiver);\n      },\n      set(\n        target: Context2DCtor,\n        prop: keyof Context2DCtor,\n        value: unknown,\n        receiver: Context2D,\n      ) {\n        // update history\n        receiver.canvas.__history.add({ type: 'set', prop, value });\n\n        // skip eventually native implementation;\n        // else the filter will be applied twice\n        if (prop === 'filter') return true;\n\n        // handle property set: a.b = value\n        return Reflect.set(target, prop, value, receiver);\n      },\n    }),\n  );\n}\n", "import './filters/blur.filter.js';\nimport './filters/brightness.filter.js';\nimport './filters/contrast.filter.js';\nimport './filters/drop-shadow.filter.js';\nimport './filters/grayscale.filter.js';\nimport './filters/hue-rotate.filter.js';\nimport './filters/invert.filter.js';\nimport './filters/none.filter.js';\nimport './filters/opacity.filter.js';\nimport './filters/saturate.filter.js';\nimport './filters/sepia.filter.js';\n\nimport { applyFilter } from './utils/filter.utils.js';\nimport { applyProxyTo, type Context2D } from './utils/proxy.utils.js';\n\ndeclare global {\n  interface WindowEventMap {\n    'context-filter-polyfill:draw': CustomEvent<{\n      original: Context2D;\n      clone: Context2D;\n      drawFn: string;\n      drawArgs: unknown[];\n    }>;\n  }\n}\n\nexport function onDraw(ctx: Context2D, drawFn: string, drawArgs?: unknown[]) {\n  // prevent recursive loop on cloned contexts\n  if (ctx.__cloned) {\n    // @ts-expect-error - all good things come in threes\n    ctx.__withoutSideEffects[drawFn](...drawArgs);\n    return;\n  }\n\n  // prepare a clone of the (offscreen) canvas to adopt its settings\n  let _canvas: HTMLCanvasElement | OffscreenCanvas;\n  if (ctx.canvas instanceof HTMLCanvasElement) {\n    _canvas = ctx.canvas.cloneNode() as HTMLCanvasElement;\n  } else {\n    _canvas = new OffscreenCanvas(ctx.canvas.width, ctx.canvas.height);\n  }\n  const clone = _canvas.getContext('2d')!;\n  clone.__cloned = true;\n\n  // we have some special cases here:\n  switch (drawFn) {\n    // here we have to prepare the clone for the draw operation,\n    // and later, we  have to clear and re-apply it completely\n    case 'clearRect':\n      // first, we need the original contents in the clone\n      clone.drawImage(ctx.canvas, 0, 0);\n      // apply the history of the original context to the clone\n      ctx.canvas.__history.applyTo(clone);\n      // clear the clone\n      clone.clearRect(...(drawArgs as [number, number, number, number]));\n      // empty original, as we'll apply everything from the clone back to it\n      ctx.__withoutSideEffects.reset?.();\n\n      break;\n\n    // when resetting the context, we need to clear the history as well\n    case 'reset':\n      ctx.canvas.__history.clear();\n      ctx.__withoutSideEffects.reset?.();\n      break;\n\n    // all other drawing functions simply get applied to the clone\n    // and then the clone is drawn back onto the original canvas\n    default:\n      // apply the history of the original context to the clone\n      ctx.canvas.__history.applyTo(clone);\n      // apply the draw function itself\n      // @ts-expect-error - all good things come in threes\n      clone[drawFn](...drawArgs);\n      // now apply the latest filter to the clone (if any)\n      applyFilter(\n        clone,\n        ctx.canvas.__history.lastValueOf('filter')?.value as string,\n      );\n\n      break;\n  }\n\n  // the canvas needs to be prepared for the next draw,\n  // that means resetting the transformation matrix\n  ctx.__withoutSideEffects.resetTransform();\n\n  // add the result to the original canvas\n  ctx.__withoutSideEffects.drawImage(clone.canvas, 0, 0);\n\n  // notify for debug purposes\n  window.dispatchEvent(\n    new CustomEvent('context-filter-polyfill:draw', {\n      detail: { original: ctx, clone, drawFn, drawArgs },\n    }),\n  );\n}\n\napplyProxyTo(HTMLCanvasElement, CanvasRenderingContext2D, { onDraw });\n\nif (typeof OffscreenCanvas !== 'undefined') {\n  applyProxyTo(OffscreenCanvas, OffscreenCanvasRenderingContext2D, { onDraw });\n}\n", "// detects usage in browser\nexport const isBrowser = () =>\n  typeof HTMLCanvasElement !== 'undefined' &&\n  typeof CanvasRenderingContext2D !== 'undefined';\n\n// detects feature availability\nexport const supportsContextFilters = () =>\n  'filter' in CanvasRenderingContext2D.prototype;\n", "// feature detector\nimport { isBrowser, supportsContextFilters } from './utils/detection.utils.js';\n\nif (isBrowser() && !supportsContextFilters()) {\n  import('./polyfill.js');\n}\n"],
  "mappings": "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EAkBxBU,EAhBW,CACf,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI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",
  "names": ["SUPPORTED_FILTERS", "init_supported_filters_global", "__esmMin", "applyFilter", "normalizeNumberPercentage", "normalizeAngle", "normalizeLength", "init_filter_utils", "__esmMin", "init_supported_filters_global", "context", "canvasFilters", "_a", "filter", "input", "options", "SUPPORTED_FILTERS", "percentage", "normalized", "angle", "length", "blur", "init_blur_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "radius", "amount", "normalizeLength", "height", "width", "imageData", "data", "wm", "hm", "rad1", "mulSum", "shgSum", "r", "g", "b", "a", "vmin", "vmax", "iterations", "p", "p1", "p2", "pa", "yw", "yi", "y", "rsum", "gsum", "bsum", "asum", "i", "x", "yp", "SUPPORTED_FILTERS", "brightness", "init_brightness_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "SUPPORTED_FILTERS", "contrast", "init_contrast_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "SUPPORTED_FILTERS", "dropShadow", "init_drop_shadow_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "offsetX", "offsetY", "blurOrColor", "color", "shadowContext", "width", "height", "normalizeLength", "SUPPORTED_FILTERS", "grayscale", "init_grayscale_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "luma", "SUPPORTED_FILTERS", "hueRotate", "init_hue_rotate_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "rotation", "amount", "normalizeAngle", "height", "width", "imageData", "data", "th", "thr", "d", "b", "ma", "mb", "mc", "md", "me", "mf", "mg", "mh", "mi", "place", "y", "x", "ir", "ig", "ib", "SUPPORTED_FILTERS", "invert", "init_invert_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "SUPPORTED_FILTERS", "none", "init_none_filter", "__esmMin", "init_supported_filters_global", "context", "SUPPORTED_FILTERS", "opacity", "init_opacity_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "SUPPORTED_FILTERS", "saturate", "init_saturate_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "saturation", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "lumR", "lumG", "lumB", "shiftW", "j", "offset", "i", "pos", "r", "g", "b", "SUPPORTED_FILTERS", "sepia", "init_sepia_filter", "__esmMin", "init_supported_filters_global", "init_filter_utils", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "r", "g", "b", "SUPPORTED_FILTERS", "isDrawingFn", "property", "DRAWING_FN_PROPS", "init_context_utils", "__esmMin", "Context2DHistory", "init_history_utils", "__esmMin", "context", "type", "prop", "value", "args", "entry", "applyProxyTo", "objectCtor", "contextCtor", "onDraw", "mirror", "properties", "prop", "Context2DHistory", "value", "target", "receiver", "_", "_a", "args", "isDrawingFn", "init_proxy_utils", "__esmMin", "init_context_utils", "init_history_utils", "polyfill_exports", "__export", "onDraw", "ctx", "drawFn", "drawArgs", "_a", "_b", "_c", "_d", "_e", "_canvas", "clone", "applyFilter", "init_polyfill", "__esmMin", "init_blur_filter", "init_brightness_filter", "init_contrast_filter", "init_drop_shadow_filter", "init_grayscale_filter", "init_hue_rotate_filter", "init_invert_filter", "init_none_filter", "init_opacity_filter", "init_saturate_filter", "init_sepia_filter", "init_filter_utils", "init_proxy_utils", "applyProxyTo", "isBrowser", "supportsContextFilters", "isBrowser", "supportsContextFilters"]
}
